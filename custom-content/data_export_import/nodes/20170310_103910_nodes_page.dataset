Tzo4OiJzdGRDbGFzcyI6MTQ6e3M6NDoidHlwZSI7czo0OiJwYWdlIjtzOjQ6Im5hbWUiO3M6MTA6IkJhc2ljIHBhZ2UiO3M6NDoiYmFzZSI7czoxMjoibm9kZV9jb250ZW50IjtzOjY6Im1vZHVsZSI7czo0OiJub2RlIjtzOjExOiJkZXNjcmlwdGlvbiI7czo3NzoiVXNlIDxlbT5iYXNpYyBwYWdlczwvZW0+IGZvciB5b3VyIHN0YXRpYyBjb250ZW50LCBzdWNoIGFzIGFuICdBYm91dCB1cycgcGFnZS4iO3M6NDoiaGVscCI7czowOiIiO3M6OToiaGFzX3RpdGxlIjtzOjE6IjEiO3M6MTE6InRpdGxlX2xhYmVsIjtzOjU6IlRpdGxlIjtzOjY6ImN1c3RvbSI7czoxOiIxIjtzOjg6Im1vZGlmaWVkIjtzOjE6IjEiO3M6NjoibG9ja2VkIjtzOjE6IjAiO3M6ODoiZGlzYWJsZWQiO3M6MToiMCI7czo5OiJvcmlnX3R5cGUiO3M6NDoicGFnZSI7czoxNjoiZGlzYWJsZWRfY2hhbmdlZCI7YjowO30=

Tzo4OiJzdGRDbGFzcyI6Mjc6e3M6MzoidmlkIjtzOjE6IjIiO3M6MzoidWlkIjtzOjE6IjEiO3M6NToidGl0bGUiO3M6NDoiSG9tZSI7czozOiJsb2ciO3M6MDoiIjtzOjY6InN0YXR1cyI7czoxOiIxIjtzOjc6ImNvbW1lbnQiO3M6MToiMSI7czo3OiJwcm9tb3RlIjtzOjE6IjEiO3M6Njoic3RpY2t5IjtzOjE6IjAiO3M6MzoibmlkIjtzOjE6IjIiO3M6NDoidHlwZSI7czo0OiJwYWdlIjtzOjg6Imxhbmd1YWdlIjtzOjM6InVuZCI7czo3OiJjcmVhdGVkIjtzOjEwOiIxNDg5MDgxNjgyIjtzOjc6ImNoYW5nZWQiO3M6MTA6IjE0ODkxMDQxOTEiO3M6NDoidG5pZCI7czoxOiIwIjtzOjk6InRyYW5zbGF0ZSI7czoxOiIwIjtzOjE4OiJyZXZpc2lvbl90aW1lc3RhbXAiO3M6MTA6IjE0ODkxMDQxOTEiO3M6MTI6InJldmlzaW9uX3VpZCI7czoxOiIxIjtzOjQ6ImJvZHkiO2E6MTp7czozOiJ1bmQiO2E6MTp7aTowO2E6NTp7czo1OiJ2YWx1ZSI7czoxNDMxOiI8ZGl2Pg0KDQogIDxkaXYgY2xhc3M9InJvdyI+DQogICAgPGRpdiBjbGFzcz0iY29sIHM3Ij4NCiAgICAgIDxoMSBjbGFzcz0idGl0bGUiPk1pY2hlbGVuZSAoTWlja2kpIFQuSC4gQ2hpPC9oMT4NCiAgICAgIDxoMiBhcmlhLWxhYmVsPSJNaWNoZWxlbmUgKE1pY2tpKSBULkguIENoaSI+DQogICAgICAgIDxpbWcgc3JjPSIvY2hpbGFiLWRydXBhbC90aGVtZXMvY2hpbGFiL2ltYWdlcy9jYWxsaWdyYXBoLnBuZyI+PC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJjb2wgczMiPg0KICAgICAgPGltZyBjbGFzcz0iaGVhZHNob3QtaW1nIiBzcmM9Ii9jaGlsYWItZHJ1cGFsL3RoZW1lcy9jaGlsYWIvaW1hZ2VzL2RyLWNoaS1oZWFkc2hvdC5qcGciIGFsdD0iTWljaGVsZW5lIChNaWNraSkgVC5ILiBDaGkiPg0KICAgIDwvZGl2Pg0KDQogIDwvZGl2Pg0KICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgIDxkaXYgY2xhc3M9ImNvbCBzMTIiPg0KICAgICAgPGgzIGNsYXNzPSJyZWR1Y2VkLWZvbnQiPkN1cnJlbnQgUG9zaXRpb25zOjwvaDM+DQogICAgICA8ZGl2IGNsYXNzPSJwb3NpdGlvbiI+DQogICAgICAgIDxoNCBjbGFzcz0iZmxvdy10ZXh0IHBvcy10aXRsZSI+PHN0cm9uZz5Eb3JvdGh5IEJyYXkgRW5kb3dlZCBQcm9mZXNzb3Igb2YgU2NpZW5jZSBhbmQgVGVhY2hpbmc8L3N0cm9uZz48L2g0Pg0KICAgICAgICA8cCBjbGFzcz0iZmxvdy10ZXh0IHBvcy1kZXRhaWwiPkRpdmlzaW9uIG9mIEVkdWNhdGlvbmFsIExlYWRlcnNoaXAgYW5kIGlubm92YXRpb248YnI+DQogICAgICAgICAgTWFyeSBMb3UgRnVsdG9uIFRlYWNoZXJzIENvbGxlZ2U8YnI+DQogICAgICAgICAgQXJpem9uYSBTdGF0ZSBVbml2ZXJzaXR5PC9wPg0KICAgICAgPC9kaXY+DQogICAgICA8ZGl2IGNsYXNzPSJwb3NpdGlvbiI+DQogICAgICAgIDxoNCBjbGFzcz0iZmxvdy10ZXh0IHBvcy10aXRsZSI+PHN0cm9uZz5EaXJlY3RvciBvZiB0aGUgTGVhcm5pbmcgYW5kIENvZ25pdGlvbiBMYWI8L3N0cm9uZz48L2g0Pg0KICAgICAgICA8cCBjbGFzcz0iZmxvdy10ZXh0IHBvcy1kZXRhaWwiPkluc3RpdHV0ZSBmb3IgdGhlIFNjaWVuY2Ugb2YgVGVhY2hpbmcgJmFtcDsgTGVhcm5pbmc8YnI+DQogICAgICAgICAgQXJpem9uYSBTdGF0ZSBVbml2ZXJzaXR5PC9wPg0KICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0iY29sIHMxMiI+DQogICAgICA8aDMgY2xhc3M9InJlZHVjZWQtZm9udCI+Q2l0aXplbnNoaXA6PC9oMz4NCiAgICAgIDxkaXYgY2xhc3M9ImNpdGl6ZW5zaGlwIj4NCiAgICAgICAgPHAgY2xhc3M9ImZsb3ctdGV4dCBjaXRpemVuc2hpcC1pdGVtIj5VLlMuIChOYXR1cmFsaXplZCBpbW1pZ3JhbnQgZnJvbSBJbmRvbmVzaWEpPC9wPg0KICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogIDwvZGl2Pg0KDQo8L2Rpdj4iO3M6Nzoic3VtbWFyeSI7czowOiIiO3M6NjoiZm9ybWF0IjtzOjk6ImZ1bGxfaHRtbCI7czoxMDoic2FmZV92YWx1ZSI7czoxMjgwOiI8ZGl2Pgo8ZGl2IGNsYXNzPSJyb3ciPgo8ZGl2IGNsYXNzPSJjb2wgczciPgo8aDEgY2xhc3M9InRpdGxlIj5NaWNoZWxlbmUgKE1pY2tpKSBULkguIENoaTwvaDE+CjxoMiBhcmlhLWxhYmVsPSJNaWNoZWxlbmUgKE1pY2tpKSBULkguIENoaSI+CiAgICAgICAgPGltZyBzcmM9Ii9jaGlsYWItZHJ1cGFsL3RoZW1lcy9jaGlsYWIvaW1hZ2VzL2NhbGxpZ3JhcGgucG5nIiAvPjwvaDI+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJjb2wgczMiPgogICAgICA8aW1nIGNsYXNzPSJoZWFkc2hvdC1pbWciIHNyYz0iL2NoaWxhYi1kcnVwYWwvdGhlbWVzL2NoaWxhYi9pbWFnZXMvZHItY2hpLWhlYWRzaG90LmpwZyIgYWx0PSJNaWNoZWxlbmUgKE1pY2tpKSBULkguIENoaSIgLz48L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9InJvdyI+CjxkaXYgY2xhc3M9ImNvbCBzMTIiPgo8aDMgY2xhc3M9InJlZHVjZWQtZm9udCI+Q3VycmVudCBQb3NpdGlvbnM6PC9oMz4KPGRpdiBjbGFzcz0icG9zaXRpb24iPgo8aDQgY2xhc3M9ImZsb3ctdGV4dCBwb3MtdGl0bGUiPjxzdHJvbmc+RG9yb3RoeSBCcmF5IEVuZG93ZWQgUHJvZmVzc29yIG9mIFNjaWVuY2UgYW5kIFRlYWNoaW5nPC9zdHJvbmc+PC9oND4KPHAgY2xhc3M9ImZsb3ctdGV4dCBwb3MtZGV0YWlsIj5EaXZpc2lvbiBvZiBFZHVjYXRpb25hbCBMZWFkZXJzaGlwIGFuZCBpbm5vdmF0aW9uPGJyIC8+PGJyIC8+CiAgICAgICAgICBNYXJ5IExvdSBGdWx0b24gVGVhY2hlcnMgQ29sbGVnZTxiciAvPjxiciAvPgogICAgICAgICAgQXJpem9uYSBTdGF0ZSBVbml2ZXJzaXR5PC9wPgo8L2Rpdj4KPGRpdiBjbGFzcz0icG9zaXRpb24iPgo8aDQgY2xhc3M9ImZsb3ctdGV4dCBwb3MtdGl0bGUiPjxzdHJvbmc+RGlyZWN0b3Igb2YgdGhlIExlYXJuaW5nIGFuZCBDb2duaXRpb24gTGFiPC9zdHJvbmc+PC9oND4KPHAgY2xhc3M9ImZsb3ctdGV4dCBwb3MtZGV0YWlsIj5JbnN0aXR1dGUgZm9yIHRoZSBTY2llbmNlIG9mIFRlYWNoaW5nICZhbXA7IExlYXJuaW5nPGJyIC8+PGJyIC8+CiAgICAgICAgICBBcml6b25hIFN0YXRlIFVuaXZlcnNpdHk8L3A+CjwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iY29sIHMxMiI+CjxoMyBjbGFzcz0icmVkdWNlZC1mb250Ij5DaXRpemVuc2hpcDo8L2gzPgo8ZGl2IGNsYXNzPSJjaXRpemVuc2hpcCI+CjxwIGNsYXNzPSJmbG93LXRleHQgY2l0aXplbnNoaXAtaXRlbSI+VS5TLiAoTmF0dXJhbGl6ZWQgaW1taWdyYW50IGZyb20gSW5kb25lc2lhKTwvcD4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CiI7czoxMjoic2FmZV9zdW1tYXJ5IjtzOjA6IiI7fX19czoxMToicmRmX21hcHBpbmciO2E6OTp7czo3OiJyZGZ0eXBlIjthOjE6e2k6MDtzOjEzOiJmb2FmOkRvY3VtZW50Ijt9czo1OiJ0aXRsZSI7YToxOntzOjEwOiJwcmVkaWNhdGVzIjthOjE6e2k6MDtzOjg6ImRjOnRpdGxlIjt9fXM6NzoiY3JlYXRlZCI7YTozOntzOjEwOiJwcmVkaWNhdGVzIjthOjI6e2k6MDtzOjc6ImRjOmRhdGUiO2k6MTtzOjEwOiJkYzpjcmVhdGVkIjt9czo4OiJkYXRhdHlwZSI7czoxMjoieHNkOmRhdGVUaW1lIjtzOjg6ImNhbGxiYWNrIjtzOjEyOiJkYXRlX2lzbzg2MDEiO31zOjc6ImNoYW5nZWQiO2E6Mzp7czoxMDoicHJlZGljYXRlcyI7YToxOntpOjA7czoxMToiZGM6bW9kaWZpZWQiO31zOjg6ImRhdGF0eXBlIjtzOjEyOiJ4c2Q6ZGF0ZVRpbWUiO3M6ODoiY2FsbGJhY2siO3M6MTI6ImRhdGVfaXNvODYwMSI7fXM6NDoiYm9keSI7YToxOntzOjEwOiJwcmVkaWNhdGVzIjthOjE6e2k6MDtzOjE1OiJjb250ZW50OmVuY29kZWQiO319czozOiJ1aWQiO2E6Mjp7czoxMDoicHJlZGljYXRlcyI7YToxOntpOjA7czoxNjoic2lvYzpoYXNfY3JlYXRvciI7fXM6NDoidHlwZSI7czozOiJyZWwiO31zOjQ6Im5hbWUiO2E6MTp7czoxMDoicHJlZGljYXRlcyI7YToxOntpOjA7czo5OiJmb2FmOm5hbWUiO319czoxMzoiY29tbWVudF9jb3VudCI7YToyOntzOjEwOiJwcmVkaWNhdGVzIjthOjE6e2k6MDtzOjE2OiJzaW9jOm51bV9yZXBsaWVzIjt9czo4OiJkYXRhdHlwZSI7czoxMToieHNkOmludGVnZXIiO31zOjEzOiJsYXN0X2FjdGl2aXR5IjthOjM6e3M6MTA6InByZWRpY2F0ZXMiO2E6MTp7aTowO3M6MjM6InNpb2M6bGFzdF9hY3Rpdml0eV9kYXRlIjt9czo4OiJkYXRhdHlwZSI7czoxMjoieHNkOmRhdGVUaW1lIjtzOjg6ImNhbGxiYWNrIjtzOjEyOiJkYXRlX2lzbzg2MDEiO319czozOiJjaWQiO3M6MToiMCI7czoyMjoibGFzdF9jb21tZW50X3RpbWVzdGFtcCI7czoxMDoiMTQ4OTA4MTY4MiI7czoxNzoibGFzdF9jb21tZW50X25hbWUiO047czoxNjoibGFzdF9jb21tZW50X3VpZCI7czoxOiIxIjtzOjEzOiJjb21tZW50X2NvdW50IjtzOjE6IjAiO3M6NDoibmFtZSI7czo2OiJjaGlsYWIiO3M6NzoicGljdHVyZSI7czoxOiIwIjtzOjQ6ImRhdGEiO3M6NDoiYjowOyI7fQ==

